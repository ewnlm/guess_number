#!/usr/bin/perl -w
  use strict;
  use experimental 'smartmatch';
  my @golden;
  my ($iter, $AB, $positively, $move, $currs, $prevs);
  my (@mask, @prev_weight, @curr_weight, @testing, @answer);
  my (@un_test, @tested, @unsuccessful);
  my (%record, %candidate, %removed, %stayed);
  open FP, "golden.txt";
  while(<FP>) {
    chomp($_);
    push @golden, $_;
  }
  close FP;

  for my $goal(@golden) {
    @mask = (1, 1, 1, 1);
    @answer = qw/X X X X/;
    @testing = 1..4;
    @prev_weight = (0,0);
    $prevs = 0;
    %record = ();
    %removed = ();
    %stayed = ();
    @un_test = grep {!($_~~ @testing)} 0..9;
    #print "un test: @un_test\n";
    $iter = 0;
    $AB = &your_result($goal, join "", @testing);
    print "@testing, ($AB, iter: $iter)\n";
    @curr_weight = split /[A|B]/, $AB;
    do {
      ### Get result
      $move = 4-$curr_weight[0]-$curr_weight[1];
      $currs = $curr_weight[0]+$curr_weight[1];
      ### Record
      map {push @{$record{$_}}, $testing[$_]} 0..$#testing;
      push @{$record{4}}, $currs;
      ### 0A0B condition
      if($currs==0) {
	}
      }
      ### 0A1B 1A0B conditions
      if($currs==1) {
      }

      if($currs==2 or $currs==3) {
      }

      if($currs==4) {
	@candidate = ();
	push @candidate, @testing;
      }

      ###
      @prev_weight = @curr_weight;
      $prevs = $currs;
      $AB = &your_result($goal, join "", @testing);
      @curr_weight = split /[A|B]/, $AB;
      print "@testing, ($AB, iter: $iter)\n";
    } while($iter<2); # $curr_weight[0]==4

    for my $i(sort keys %record) {
      print "Record: $i, @{$record{$i}}\n";
    }

  }



  sub your_result {
    my @ary_i = split //, shift @_;
    my @ary_j = split //, shift @_;
    my @a = map {$ary_i[$_]=~/$ary_j[$_]/} 0..$#ary_i;
    my @b = grep {$_ ~~ @ary_j} @ary_i;
    my $A = ($#a<0)?(0):($#a+1);
    my $B = ($#b<0)?(0):(abs($#b-$#a));
    $iter++;
    my $str = "$A"."A$B"."B";
  }
