#!/usr/bin/perl -w
  use strict;
  use experimental 'smartmatch';
  my @golden;
  my ($iter, $AB, $positively, $currs, $prevs);
  my (@unknown, @possible, $delta, @cat);
  my (@prev_weight, @curr_weight, @testing, @answer);
  my (@un_test, @tested, @unsuccessful);
  my (%candidate, %removed);
  open FP, "golden.txt";
  while(<FP>) {
    chomp($_);
    push @golden, $_;
  }
  close FP;

  for my $goal(@golden) {
    @mask = (0, 0, 0, 0);
    @answer = qw/X X X X/;
    @testing = 1..4;
    @prev_weight = (0,0);
    $prevs = 0;
    %removed = ();
    @un_test = grep {!($_~~ @testing)} 0..9;
    $iter = 0;
    $AB = &your_result($goal, join "", @testing);
    print "@testing, ($AB, iter: $iter)\n";
    @curr_weight = split /[A|B]/, $AB;
    $currs = $curr_weight[0]+$curr_weight[1];
    while($iter<2) { # $curr_weight[0]==4
      ### Exchange positions
      if("C" ~~ @answer) {

      }

      ### Test the new number
      $delta = $prevs-$currs;
      @unknown = grep {$answer[$_]=~/X/} 0..$#answer;
      @possible = grep {$answer[$_]=~/P/} 0..$#answer;
      if($currs=~/0/) {
	if($prevs>$currs) {
	  for my $i(keys %{$removed{$iter-1}}) {
	    push @unsuccessful, $testing[$i];
	    $testing[$i] = $removed{$iter-1}{$i};
	    $answer[$i] = "P";
	    ### 目前的值, 放到 @unsuccessful, 因為 0A0B
	    ### 上一步的值, 放回 @testing
	    ### 修改 @answer 為 P (Possible)
	    ### 這個情況只有 $prevs=1, 修改兩個值, 才會發生
	  }
	} else {
	  push @unsuccessful, @testing;
	  @testing = splice @un_test, 0, 4;
	  ### 只有 0 -> 0 這種情況
	  ### 全部丟到 @unsuccessful 再從 @un_test 切新的值出來.
	}
      } elsif($currs=~/1/) {

      } elsif($currs=~/[2|3]/) {

      } else {
	### 不換數字, 只換位置

      }

      ### Post process
      @prev_weight = @curr_weight;
      $prevs = $currs;
      $AB = &your_result($goal, join "", @testing);
      @curr_weight = split /[A|B]/, $AB;
      $currs = $curr_weight[0]+$curr_weight[1];
      print "@testing, ($AB, iter: $iter)\n";
    }
  }



  sub your_result {
    my @ary_i = split //, shift @_;
    my @ary_j = split //, shift @_;
    my @a = map {$ary_i[$_]=~/$ary_j[$_]/} 0..$#ary_i;
    my @b = grep {$_ ~~ @ary_j} @ary_i;
    my $A = ($#a<0)?(0):($#a+1);
    my $B = ($#b<0)?(0):(abs($#b-$#a));
    $iter++;
    my $str = "$A"."A$B"."B";
  }
