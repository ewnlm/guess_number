#!/usr/bin/perl -w
  use strict;
  use experimental 'smartmatch';
  my @golden;
  my ($iter, $AB, $positively, $currs, $prevs);
  my (@mask, @prev_weight, @curr_weight, @testing, @answer);
  my (@un_test, @tested, @unsuccessful);
  my (%candidate, %removed, %stayed);
  open FP, "golden.txt";
  while(<FP>) {
    chomp($_);
    push @golden, $_;
  }
  close FP;

  for my $goal(@golden) {
    @mask = (0, 0, 0, 0);
    @answer = qw/X X X X/;
    @testing = 1..4;
    @prev_weight = (0,0);
    $prevs = 0;
    %removed = ();
    %stayed = ();
    @un_test = grep {!($_~~ @testing)} 0..9;
    $iter = 0;
    $AB = &your_result($goal, join "", @testing);
    print "@testing, ($AB, iter: $iter)\n";
    @curr_weight = split /[A|B]/, $AB;
    $currs = $curr_weight[0]+$curr_weight[1];
    while($iter<2) { # $curr_weight[0]==4
      ### @answer %candidate and @unsuccessful
      if($currs==0) {
	push @unsuccessful, @testing;
      }
      if($prev_weight[0]>$curr_weight[0]) {
	my $idx = $removed{$iter-1}{idx};
	my $val = $removed{$iter-1}{val};
	$answer[$idx] = $val;
	delete $candidate{$idx}, if(exists $candidate{$idx});
      } 
      if($prev_weight[1]>$curr_weight[1]) {
	my $idx = $removed{$iter-1}{idx};
	my $val = $removed{$iter-1}{val};
	$candidate{$idx}{$val}++;
      } 

      if(@prev_weight ~~ @curr_weight) {
	my $val = $removed{$iter-1}{val};
	push @unsuccessful, $val;
      }

      ### %removed and %stayed
      if($currs==0) {
	for my $i(0..$#testing) {
	  $removed{$iter}{idx} = $i;
	  $removed{$iter}{val} = $testing[$i];
	}
      } else {
	for my $i(0..$#answer) {

	}

      }
      ### @testing @un_test

      ###
      @prev_weight = @curr_weight;
      $prevs = $currs;
      $AB = &your_result($goal, join "", @testing);
      @curr_weight = split /[A|B]/, $AB;
      $currs = $curr_weight[0]+$curr_weight[1];
      print "@testing, ($AB, iter: $iter)\n";
    }
  }



  sub your_result {
    my @ary_i = split //, shift @_;
    my @ary_j = split //, shift @_;
    my @a = map {$ary_i[$_]=~/$ary_j[$_]/} 0..$#ary_i;
    my @b = grep {$_ ~~ @ary_j} @ary_i;
    my $A = ($#a<0)?(0):($#a+1);
    my $B = ($#b<0)?(0):(abs($#b-$#a));
    $iter++;
    my $str = "$A"."A$B"."B";
  }
